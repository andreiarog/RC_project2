install.packages("arules")
install.packages("dplyr")
library("caret", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("dplyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("e1071", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
install.packages("")
iris <- read.csv("~/Documents/SAD/iris.csv")
iris=mutate_if(iris, is.character, as.factor
)
iris=mutate_if(iris, is.character, as.factor)
see(1234)
set.seed(1234)
index <- createDataPartition(iris$class, p=0.70, list = FALSE)
trainData=iris[index,]
testData=iris[-index,]
model_knn=train(trainData[1:4], trainData$class, method = 'knn')
model_knn=train(trainData[1:4], trainData$class, method = 'knn', preProcess = c("center", "scale"))
model_knn=train(trainData[1:4], trainData$class, method = 'knn')
model_knn_pp=train(trainData[1:4], trainData$class, method = 'knn', preProcess = c("center", "scale"))
model_knn
model_knn1=knn3(trainData[,1:4],testData$class, c1=trainData$class, k=1)
model_knn1
predictions <- predict(object = model_knn1, testData[,1:4])
library("caret", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("dplyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
library("e1071", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.4")
iris=mutate_if(iris, is.character, as.factor)
iris=mutate_if(iris, is.character, as.factor)
set.seed(1234)
index <- createDataPartition(iris$class, p=0.70, list=FALSE)
View(iris)
iris <- read.csv("~Documents/SAD/iris.csv")
index <- createDataPartition(iris$class, p=0.70, list=FALSE)
iris <- read.csv("~/Documents/SAD/iris.csv")
View(iris)
iris=mutate_if(iris, is.character, as.factor)
set.seed(1234)
index <- createDataPartition(iris$class, p=0.70, list=FALSE)
View(index)
View(index)
trainData=iris[index,]
testData=iris[-index,]
View(testData)
View(trainData)
View(testData)
model_knn=train(trainData[1:4], trainData$class, method='knn')
model_knn_pp=train(trainData[1:4], trainData$class, method='knn', preProcess = c("center", "scale"))
View(model_knn)
model_knn
model_knn_trained=knn3(trainData[,1:4], testData$class, c1=trainData$class, k=1)
model_knn_trained2=knn3(trainData[1:4], testData$class, c1=trainData$class, k=1)
model_knn_trained
model_knn_trained2
model_knn_trained2=knn3(trainData[1:4], trainData$class, c1=trainData$class, k=1)
model_knn_trained=knn3(trainData[,1:4], trainData$class, c1=trainData$class, k=1)
model_knn_trained2
model_knn_trained
predictions<-predict(object = model_knn_trained, testData[1:4])
predictions<-predict(object = model_knn, testData[1:4])
table(predictions)
confusionMatrix(predictions, testData$class)
install.packages("DeepBlueR")
source("https://bioconductor.org/biocLite.R")
biocLite("DeepBlueR")
library(DeepBlueR)
library(DeepBlueR)
deepblue_info("me")
options(stringsAsFactors = FALSE)
HLA <- read.table("/home/andreia/Documents/Kings 2018/Data to classify/hla_genotype_table.txt", header = FALSE, sep = "\t")
source('~/.active-rstudio-document')
####  TEST HLA-A  ####
HLA_A_df <- data.frame(SampleID = c(HLA$V1, HLA$V1),
allele_A = c(HLA$V2, HLA$V3),
HORMAD1 = c(HLA$V8, HLA$V8))
options(stringsAsFactors = FALSE)
HLA <- read.table("/home/andreia/Documents/Kings 2018/Data to classify/hla_genotype_table.txt", header = FALSE, sep = "\t")
####  TEST HLA-A  ####
HLA_A_df <- data.frame(SampleID = c(HLA$V1, HLA$V1),
allele_A = c(HLA$V2, HLA$V3),
HORMAD1 = c(HLA$V8, HLA$V8))
HLA_A_out <- NULL
for (allele_A in unique(HLA_A_df$allele_A)) {
HLA_A_df$tmp <- factor(ifelse(HLA_A_df$allele_A == allele_A, TRUE, FALSE), levels = c(TRUE, FALSE))
cont.table <- table(HLA_A_df$tmp, HLA_A_df$HORMAD1)
HLA_A_out <- rbind(HLA_A_out,
c(allele_A, fisher.test(cont.table)$p.value, fisher.test(cont.table)$estimate, fisher.test(cont.table)$conf.int))
}
HLA_A_out <- data.frame(HLA_A_out)
colnames(HLA_A_out) <- c("allele_A", "P", "OR", "CI5", "CI95")
HLA_A_out$Q <- p.adjust(HLA_A_out$P, method = "fdr")
View(HLA_A_df)
View(HLA_A_out)
####  TEST HLA-B  ####
HLA_B_df <- data.frame(SampleID = c(HLA$V1, HLA$V1),
allele_A = c(HLA$V4, HLA$V5),
HORMAD1 = c(HLA$V8, HLA$V8))
HLA_B_out <- NULL
for (allele_B in unique(HLA_B_df$allele_B)) {
HLA_B_df$tmp <- factor(ifelse(HLA_B_df$allele_B == allele_B, TRUE, FALSE), levels = c(TRUE, FALSE))
cont.table <- table(HLA_B_df$tmp, HLA_B_df$HORMAD1)
HLA_B_out <- rbind(HLA_B_out,
c(allele_B, fisher.test(cont.table)$p.value, fisher.test(cont.table)$estimate, fisher.test(cont.table)$conf.int))
}
HLA_B_out <- data.frame(HLA_B_out)
colnames(HLA_B_out) <- c("allele_B", "P", "OR", "CI5", "CI95")
HLA_B_out$Q <- p.adjust(HLA_B_out$P, method = "fdr")
View(HLA_B_out)
####  TEST HLA-B  ####
HLA_B_df <- data.frame(SampleID = c(HLA$V1, HLA$V1),
allele_B = c(HLA$V4, HLA$V5),
HORMAD1 = c(HLA$V8, HLA$V8))
HLA_B_out <- NULL
for (allele_B in unique(HLA_B_df$allele_B)) {
HLA_B_df$tmp <- factor(ifelse(HLA_B_df$allele_B == allele_B, TRUE, FALSE), levels = c(TRUE, FALSE))
cont.table <- table(HLA_B_df$tmp, HLA_B_df$HORMAD1)
HLA_B_out <- rbind(HLA_B_out,
c(allele_B, fisher.test(cont.table)$p.value, fisher.test(cont.table)$estimate, fisher.test(cont.table)$conf.int))
}
####  TEST HLA-B  ####
HLA_B_df <- data.frame(SampleID = c(HLA$V1, HLA$V1),
allele_B = c(HLA$V4, HLA$V5),
HORMAD1 = c(HLA$V8, HLA$V8))
HLA_B_out <- NULL
for (allele_B in unique(HLA_B_df$allele_B)) {
HLA_B_df$tmp <- factor(ifelse(HLA_B_df$allele_B == allele_B, TRUE, FALSE), levels = c(TRUE, FALSE))
cont.table <- table(HLA_B_df$tmp, HLA_B_df$HORMAD1)
HLA_B_out <- rbind(HLA_B_out,
c(allele_B, fisher.test(cont.table)$p.value, fisher.test(cont.table)$estimate, fisher.test(cont.table)$conf.int))
}
HLA_B_out <- data.frame(HLA_B_out)
colnames(HLA_B_out) <- c("allele_B", "P", "OR", "CI5", "CI95")
HLA_B_out$Q <- p.adjust(HLA_B_out$P, method = "fdr")
####  TEST HLA-B  ####
HLA_B_df <- data.frame(SampleID = c(HLA$V1, HLA$V1),
allele_B = c(HLA$V4, HLA$V5),
HORMAD1 = c(HLA$V8, HLA$V8))
HLA_B_out <- NULL
for (allele_B in unique(HLA_B_df$allele_B)) {
HLA_B_df$tmp <- factor(ifelse(HLA_B_df$allele_B == allele_B, TRUE, FALSE), levels = c(TRUE, FALSE))
cont.table <- table(HLA_B_df$tmp, HLA_B_df$HORMAD1)
HLA_B_out <- rbind(HLA_B_out,
c(allele_B, fisher.test(cont.table)$p.value, fisher.test(cont.table)$estimate, fisher.test(cont.table)$conf.int))
}
HLA_B_out <- data.frame(HLA_B_out)
colnames(HLA_B_out) <- c("allele_B", "P", "OR", "CI5", "CI95")
HLA_B_out$Q <- p.adjust(HLA_B_out$P, method = "fdr")
####  TEST HLA-C  ####
HLA_C_df <- data.frame(SampleID = c(HLA$V1, HLA$V1),
allele_C = c(HLA$V4, HLA$V5),
HORMAD1 = c(HLA$V8, HLA$V8))
HLA_C_out <- NULL
for (allele_C in unique(HLA_C_df$allele_C)) {
HLA_C_df$tmp <- factor(ifelse(HLA_C_df$allele_C == allele_C, TRUE, FALSE), levels = c(TRUE, FALSE))
cont.table <- table(HLA_C_df$tmp, HLA_C_df$HORMAD1)
HLA_C_out <- rbind(HLA_C_out,
c(allele_C, fisher.test(cont.table)$p.value, fisher.test(cont.table)$estimate, fisher.test(cont.table)$conf.int))
}
HLA_C_out <- data.frame(HLA_C_out)
colnames(HLA_C_out) <- c("allele_C", "P", "OR", "CI5", "CI95")
HLA_C_out$Q <- p.adjust(HLA_C_out$P, method = "fdr")
View(HLA_C_out)
####  TEST HLA-C  ####
HLA_C_df <- data.frame(SampleID = c(HLA$V1, HLA$V1),
allele_C = c(HLA$V6, HLA$V7),
HORMAD1 = c(HLA$V8, HLA$V8))
HLA_C_out <- NULL
for (allele_C in unique(HLA_C_df$allele_C)) {
HLA_C_df$tmp <- factor(ifelse(HLA_C_df$allele_C == allele_C, TRUE, FALSE), levels = c(TRUE, FALSE))
cont.table <- table(HLA_C_df$tmp, HLA_C_df$HORMAD1)
HLA_C_out <- rbind(HLA_C_out,
c(allele_C, fisher.test(cont.table)$p.value, fisher.test(cont.table)$estimate, fisher.test(cont.table)$conf.int))
}
HLA_C_out <- data.frame(HLA_C_out)
colnames(HLA_C_out) <- c("allele_C", "P", "OR", "CI5", "CI95")
HLA_C_out$Q <- p.adjust(HLA_C_out$P, method = "fdr")
####  TEST HLA-C  ####
HLA_C_df <- data.frame(SampleID = c(HLA$V1, HLA$V1),
allele_C = c(HLA$V6, HLA$V7),
HORMAD1 = c(HLA$V8, HLA$V8))
HLA_C_out <- NULL
for (allele_C in unique(HLA_C_df$allele_C)) {
HLA_C_df$tmp <- factor(ifelse(HLA_C_df$allele_C == allele_C, TRUE, FALSE), levels = c(TRUE, FALSE))
cont.table <- table(HLA_C_df$tmp, HLA_C_df$HORMAD1)
HLA_C_out <- rbind(HLA_C_out,
c(allele_C, fisher.test(cont.table)$p.value, fisher.test(cont.table)$estimate, fisher.test(cont.table)$conf.int), cont.table[1, 1], cont.table[1, 2])
}
HLA_C_out <- data.frame(HLA_C_out)
colnames(HLA_C_out) <- c("allele_C", "P", "OR", "CI5", "CI95", "#Positive", "#Negative")
HLA_C_out$Q <- p.adjust(HLA_C_out$P, method = "fdr")
####  TEST HLA-C  ####
HLA_C_df <- data.frame(SampleID = c(HLA$V1, HLA$V1),
allele_C = c(HLA$V6, HLA$V7),
HORMAD1 = c(HLA$V8, HLA$V8))
HLA_C_out <- NULL
for (allele_C in unique(HLA_C_df$allele_C)) {
HLA_C_df$tmp <- factor(ifelse(HLA_C_df$allele_C == allele_C, TRUE, FALSE), levels = c(TRUE, FALSE))
cont.table <- table(HLA_C_df$tmp, HLA_C_df$HORMAD1)
print(cont.table)
HLA_C_out <- rbind(HLA_C_out,
c(allele_C, fisher.test(cont.table)$p.value, fisher.test(cont.table)$estimate, fisher.test(cont.table)$conf.int), cont.table[1, 1], cont.table[1, 2])
}
View(HLA_C_out)
HLA_C_out <- NULL
for (allele_C in unique(HLA_C_df$allele_C)) {
HLA_C_df$tmp <- factor(ifelse(HLA_C_df$allele_C == allele_C, TRUE, FALSE), levels = c(TRUE, FALSE))
cont.table <- table(HLA_C_df$tmp, HLA_C_df$HORMAD1)
print(cont.table)
HLA_C_out <- rbind(HLA_C_out,
c(allele_C, fisher.test(cont.table)$p.value, fisher.test(cont.table)$estimate, fisher.test(cont.table)$conf.int), cont.table[1, "High"], cont.table[1, "Low"])
}
HLA_C_out <- data.frame(HLA_C_out)
colnames(HLA_C_out) <- c("allele_C", "P", "OR", "CI5", "CI95", "#Positive", "#Negative")
####  TEST HLA-C  ####
HLA_C_df <- data.frame(SampleID = c(HLA$V1, HLA$V1),
allele_C = c(HLA$V6, HLA$V7),
HORMAD1 = c(HLA$V8, HLA$V8))
HLA_C_out <- NULL
for (allele_C in unique(HLA_C_df$allele_C)) {
HLA_C_df$tmp <- factor(ifelse(HLA_C_df$allele_C == allele_C, TRUE, FALSE), levels = c(TRUE, FALSE))
cont.table <- table(HLA_C_df$tmp, HLA_C_df$HORMAD1)
print(cont.table)
HLA_C_out <- rbind(HLA_C_out,
c(allele_C, fisher.test(cont.table)$p.value, fisher.test(cont.table)$estimate, fisher.test(cont.table)$conf.int), cont.table["TRUE", "High"], cont.table["TRUE", "Low"])
}
HLA_C_out <- data.frame(HLA_C_out)
colnames(HLA_C_out) <- c("allele_C", "P", "OR", "CI5", "CI95", "#Positive", "#Negative")
cont.table
str(cont.table)
as.data.frame(cont.table)
cont.table[,3]
cont.table[,2]
cont.table[0,2]
cont.table[1,2]
as.numeric(cont.table[1,2])
####  TEST HLA-C  ####
HLA_C_df <- data.frame(SampleID = c(HLA$V1, HLA$V1),
allele_C = c(HLA$V6, HLA$V7),
HORMAD1 = c(HLA$V8, HLA$V8))
HLA_C_out <- NULL
for (allele_C in unique(HLA_C_df$allele_C)) {
HLA_C_df$tmp <- factor(ifelse(HLA_C_df$allele_C == allele_C, TRUE, FALSE), levels = c(TRUE, FALSE))
cont.table <- table(HLA_C_df$tmp, HLA_C_df$HORMAD1)
print(cont.table)
HLA_C_out <- rbind(HLA_C_out,
c(allele_C, fisher.test(cont.table)$p.value, fisher.test(cont.table)$estimate, fisher.test(cont.table)$conf.int), cont.table[1,1], cont.table[1,2])
}
HLA_C_out <- data.frame(HLA_C_out)
colnames(HLA_C_out) <- c("allele_C", "P", "OR", "CI5", "CI95", "#Positive", "#Negative")
HLA_C_out$Q <- p.adjust(HLA_C_out$P, method = "fdr")
####  TEST HLA-C  ####
HLA_C_df <- data.frame(SampleID = c(HLA$V1, HLA$V1),
allele_C = c(HLA$V6, HLA$V7),
HORMAD1 = c(HLA$V8, HLA$V8))
HLA_C_out <- NULL
for (allele_C in unique(HLA_C_df$allele_C)) {
HLA_C_df$tmp <- factor(ifelse(HLA_C_df$allele_C == allele_C, TRUE, FALSE), levels = c(TRUE, FALSE))
cont.table <- table(HLA_C_df$tmp, HLA_C_df$HORMAD1)
print(cont.table)
HLA_C_out <- rbind(HLA_C_out,
c(allele_C, fisher.test(cont.table)$p.value, fisher.test(cont.table)$estimate, fisher.test(cont.table)$conf.int))
HLA_C_out <- rbind(HLA_C_out, cont.table[1,1])
}
HLA_C_out <- data.frame(HLA_C_out)
colnames(HLA_C_out) <- c("allele_C", "P", "OR", "CI5", "CI95", "#Positive", "#Negative")
HLA_C_out$Q <- p.adjust(HLA_C_out$P, method = "fdr")
View(HLA_C_out)
####  TEST HLA-C  ####
HLA_C_df <- data.frame(SampleID = c(HLA$V1, HLA$V1),
allele_C = c(HLA$V6, HLA$V7),
HORMAD1 = c(HLA$V8, HLA$V8))
HLA_C_out <- NULL
for (allele_C in unique(HLA_C_df$allele_C)) {
HLA_C_df$tmp <- factor(ifelse(HLA_C_df$allele_C == allele_C, TRUE, FALSE), levels = c(TRUE, FALSE))
cont.table <- table(HLA_C_df$tmp, HLA_C_df$HORMAD1)
print(cont.table)
HLA_C_out <- rbind(HLA_C_out,
c(allele_C, fisher.test(cont.table)$p.value, fisher.test(cont.table)$estimate, fisher.test(cont.table)$conf.int, cont.table[1,1], cont.table[1,2])
}
HLA_C_out <- data.frame(HLA_C_out)
colnames(HLA_C_out) <- c("allele_C", "P", "OR", "CI5", "CI95", "#Positive", "#Negative")
HLA_C_out$Q <- p.adjust(HLA_C_out$P, method = "fdr")
####  TEST HLA-C  ####
HLA_C_df <- data.frame(SampleID = c(HLA$V1, HLA$V1),
allele_C = c(HLA$V6, HLA$V7),
HORMAD1 = c(HLA$V8, HLA$V8))
HLA_C_out <- NULL
for (allele_C in unique(HLA_C_df$allele_C)) {
HLA_C_df$tmp <- factor(ifelse(HLA_C_df$allele_C == allele_C, TRUE, FALSE), levels = c(TRUE, FALSE))
cont.table <- table(HLA_C_df$tmp, HLA_C_df$HORMAD1)
print(cont.table)
HLA_C_out <- rbind(HLA_C_out,
c(allele_C, fisher.test(cont.table)$p.value, fisher.test(cont.table)$estimate, fisher.test(cont.table)$conf.int, cont.table[1,1], cont.table[1,2]))
}
HLA_C_out <- data.frame(HLA_C_out)
colnames(HLA_C_out) <- c("allele_C", "P", "OR", "CI5", "CI95", "#Positive", "#Negative")
HLA_C_out$Q <- p.adjust(HLA_C_out$P, method = "fdr")
options(stringsAsFactors = FALSE)
HLA <- read.table("/home/andreia/Documents/Kings 2018/Data to classify/hla_genotype_table.txt", header = FALSE, sep = "\t")
####  TEST HLA-A  ####
HLA_A_df <- data.frame(SampleID = c(HLA$V1, HLA$V1),
allele_A = c(HLA$V2, HLA$V3),
HORMAD1 = c(HLA$V8, HLA$V8))
HLA_A_out <- NULL
for (allele_A in unique(HLA_A_df$allele_A)) {
HLA_A_df$tmp <- factor(ifelse(HLA_A_df$allele_A == allele_A, TRUE, FALSE), levels = c(TRUE, FALSE))
cont.table <- table(HLA_A_df$tmp, HLA_A_df$HORMAD1)
HLA_A_out <- rbind(HLA_A_out,
c(allele_A, fisher.test(cont.table)$p.value, fisher.test(cont.table)$estimate, fisher.test(cont.table)$conf.int,  cont.table[1,1], cont.table[1,2]))
}
HLA_A_out <- data.frame(HLA_A_out)
colnames(HLA_A_out) <- c("allele_A", "P", "OR", "CI5", "CI95")
HLA_A_out$Q <- p.adjust(HLA_A_out$P, method = "fdr")
####  TEST HLA-B  ####
HLA_B_df <- data.frame(SampleID = c(HLA$V1, HLA$V1),
allele_B = c(HLA$V4, HLA$V5),
HORMAD1 = c(HLA$V8, HLA$V8))
HLA_B_out <- NULL
for (allele_B in unique(HLA_B_df$allele_B)) {
HLA_B_df$tmp <- factor(ifelse(HLA_B_df$allele_B == allele_B, TRUE, FALSE), levels = c(TRUE, FALSE))
cont.table <- table(HLA_B_df$tmp, HLA_B_df$HORMAD1)
HLA_B_out <- rbind(HLA_B_out,
c(allele_B, fisher.test(cont.table)$p.value, fisher.test(cont.table)$estimate, fisher.test(cont.table)$conf.int,  cont.table[1,1], cont.table[1,2]))
}
HLA_B_out <- data.frame(HLA_B_out)
colnames(HLA_B_out) <- c("allele_B", "P", "OR", "CI5", "CI95")
HLA_B_out$Q <- p.adjust(HLA_B_out$P, method = "fdr")
options(stringsAsFactors = FALSE)
HLA <- read.table("/home/andreia/Documents/Kings 2018/Data to classify/hla_genotype_table.txt", header = FALSE, sep = "\t")
####  TEST HLA-A  ####
HLA_A_df <- data.frame(SampleID = c(HLA$V1, HLA$V1),
allele_A = c(HLA$V2, HLA$V3),
HORMAD1 = c(HLA$V8, HLA$V8))
HLA_A_out <- NULL
for (allele_A in unique(HLA_A_df$allele_A)) {
HLA_A_df$tmp <- factor(ifelse(HLA_A_df$allele_A == allele_A, TRUE, FALSE), levels = c(TRUE, FALSE))
cont.table <- table(HLA_A_df$tmp, HLA_A_df$HORMAD1)
HLA_A_out <- rbind(HLA_A_out,
c(allele_A, fisher.test(cont.table)$p.value, fisher.test(cont.table)$estimate, fisher.test(cont.table)$conf.int,  cont.table[1,1], cont.table[1,2]))
}
HLA_A_out <- data.frame(HLA_A_out)
colnames(HLA_A_out) <- c("allele_A", "P", "OR", "CI5", "CI95", "#Positive", "#Negative")
HLA_A_out$Q <- p.adjust(HLA_A_out$P, method = "fdr")
####  TEST HLA-B  ####
HLA_B_df <- data.frame(SampleID = c(HLA$V1, HLA$V1),
allele_B = c(HLA$V4, HLA$V5),
HORMAD1 = c(HLA$V8, HLA$V8))
HLA_B_out <- NULL
for (allele_B in unique(HLA_B_df$allele_B)) {
HLA_B_df$tmp <- factor(ifelse(HLA_B_df$allele_B == allele_B, TRUE, FALSE), levels = c(TRUE, FALSE))
cont.table <- table(HLA_B_df$tmp, HLA_B_df$HORMAD1)
HLA_B_out <- rbind(HLA_B_out,
c(allele_B, fisher.test(cont.table)$p.value, fisher.test(cont.table)$estimate, fisher.test(cont.table)$conf.int,  cont.table[1,1], cont.table[1,2]))
}
HLA_B_out <- data.frame(HLA_B_out)
colnames(HLA_B_out) <- c("allele_B", "P", "OR", "CI5", "CI95", "#Positive", "#Negative")
HLA_B_out$Q <- p.adjust(HLA_B_out$P, method = "fdr")
####  TEST HLA-C  ####
HLA_C_df <- data.frame(SampleID = c(HLA$V1, HLA$V1),
allele_C = c(HLA$V6, HLA$V7),
HORMAD1 = c(HLA$V8, HLA$V8))
HLA_C_out <- NULL
for (allele_C in unique(HLA_C_df$allele_C)) {
HLA_C_df$tmp <- factor(ifelse(HLA_C_df$allele_C == allele_C, TRUE, FALSE), levels = c(TRUE, FALSE))
cont.table <- table(HLA_C_df$tmp, HLA_C_df$HORMAD1)
print(cont.table)
HLA_C_out <- rbind(HLA_C_out,
c(allele_C, fisher.test(cont.table)$p.value, fisher.test(cont.table)$estimate, fisher.test(cont.table)$conf.int, cont.table[1,1], cont.table[1,2]))
}
HLA_C_out <- data.frame(HLA_C_out)
colnames(HLA_C_out) <- c("allele_C", "P", "OR", "CI5", "CI95", "#Positive", "#Negative")
HLA_C_out$Q <- p.adjust(HLA_C_out$P, method = "fdr")
save.image("~/Documents/Kings 2018/Data to classify/Significance of Polysolver Results/allele.RData")
load("/home/andreia/Documents/Kings 2018/Data to classify/Significance of Polysolver Results/allele.RData")
install.packages("devtools")
install_github("yunshiuan/label4MRI",subdir = "label4MRI")
library("devtools")
install.packages("git2r")
install.packages("libssl-dev")
install.packages("libssl-dev")
install.packages("devtools")
library("devtools")
install.packages("devtools")
library("devtools")
install_github("yunshiuan/label4MRI",subdir = "label4MRI")
library(mni2aal)
mni_to_region_name(20,-15,-18)
Coactivation_matrix <- read.csv("~/Documents/MEIC/Redes/RC_project2/Coactivation_matrix.mat", header=FALSE, comment.char="#")
View(Coactivation_matrix)
install.packages("R.matlab")
library(R.matlab)
Coactivation_matrix <- readMat("/home/andreia/Documents/MEIC/Redes/RC_project2/Coactivation_matrix.mat")
View(Coactivation_matrix)
Coactivation_matrix[["Coord"]]
Coactivation_matrix[["Coord"]]$1
Coactivation_matrix[["Coord"]][,1]
dta <- data.frame(x=Coactivation_matrix[["Coord"]][,1], y=Coactivation_matrix[["Coord"]][,2], z=Coactivation_matrix[["Coord"]][,3])
View(dta)
history()
savehistory("~/Desktop/history.txt")
Result=t(mapply(FUN=mni_to_region_name,x=dta$x,y=dta$y,z=dta$z))
View(Result)
Result[638]
Result[616]
savehistory("~/Desktop/hist.txt")
save.image("~/Documents/MEIC/Redes/RC_project2/metadata.RData")
View(Result)
View(Result)
save.image("~/Documents/MEIC/Redes/RC_project2/matrix.RData")
save('metadata.mat','Result');
save('Result', 'metadata.mat');
save('Result');
View(Result)
save('Result', metadata.mat);
save(metadata.mat, "Result");
save(metadata.mat, Result);
save(Result);
save(filename,Result);
load("~/Documents/MEIC/Redes/RC_project2/metadata.RData")
save("~/Documents/MEIC/Redes/RC_project2/metadata.RData")
save("/home/andreia/Documents/MEIC/Redes/RC_project2/metadata.mat", Result)
save('/home/andreia/Documents/MEIC/Redes/RC_project2/metadata.mat', Result)
save('Result')
save('result.mat', Result')
;
q
\q
save('result.mat', 'Result')
save('result.mat', 'Result')
save('/home/andreia/Documents/MEIC/Redes/RC_project2/result.mat', 'Result')
View(Result)
csvwrite('test.txt',Result)
save('a.mat', 'Result', '-mat', '-v7.3');
save('a.mat', 'Result');
save('/home/andreia/Documents/MEIC/Redes/RC_project2/result.mat', 'Result');
setwd("~/Documents/MEIC/Redes/RC_project2")
save('resuly.mat', 'Result');
save('result.mat', 'Result');
load("~/Documents/MEIC/Redes/RC_project2/metadata.RData")
View(Result)
